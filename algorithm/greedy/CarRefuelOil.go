package greedy

import "fmt"

/**
1. 何为贪心算法
贪心算法又称贪婪算法，是指在对问题求解时，总是做出在当前步骤看来是最好的选择。
也就是说，不从整体最优上加以考虑，所做出的是在某种意义上的局部最优解。

2. 贪心算法的特点
贪心策略的选择只跟当前有关，跟前面的状态没有关系；
贪心算法通过迭代把总问题分解为若干个子问题，通过求解子问题，然后把子问题最优解合成总问题的最优解；
贪心算法可以归结为每次求最大值（最小值）

3. 汽车加油问题
问题描述
一辆汽车加满油一次可以跑300公里，现该车在第一个加油站出发时加满油，
然后需要陆续经过间隔为[150,180,120,100,280,160]的加油站，指出在哪些油站加油，可以加油次数最少，算出加油次数。
意即该汽车一次最多跑300公里，第一次在起点加满油，途径的加油站间隔为[150,180,120,100,280,160]，求加油最少次数。
*/

//n为汽车加满油一次可以跑的公里数，dis为汽车途径的加油站的间隔公里数
func MinCarRefuelOil(n int, dis []int) int {
	res := 1
	count := 0 //加满油后加油站的间隔累积数
	for i, disItem := range dis {
		count += disItem
		if n < count {
			fmt.Println(dis[i-1], "公里处加油")
			count = disItem
			res++
		}
	}
	fmt.Println("该车最少要加油", res, "次")
	return res
}
