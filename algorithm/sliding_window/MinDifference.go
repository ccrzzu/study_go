package sliding_window

import "sort"

/**
1984
给你一个 下标从 0 开始 的整数数组 nums ，其中 nums[i] 表示第 i 名学生的分数。另给你一个整数 k 。

从数组中选出任意 k 名学生的分数，使这 k 个分数间 最高分 和 最低分 的 差值 达到 最小化 。

返回可能的 最小差值 。

说明：
1 <= k <= nums.length <= 1000
0 <= nums[i] <= 100000


示例：
输入：nums = [9,4,1,7], k = 2
输出：2
解释：选出 2 名学生的分数，有 6 种方法：
- [9,4,1,7] 最高分和最低分之间的差值是 9 - 4 = 5
- [9,4,1,7] 最高分和最低分之间的差值是 9 - 1 = 8
- [9,4,1,7] 最高分和最低分之间的差值是 9 - 7 = 2
- [9,4,1,7] 最高分和最低分之间的差值是 4 - 1 = 3
- [9,4,1,7] 最高分和最低分之间的差值是 7 - 4 = 3
- [9,4,1,7] 最高分和最低分之间的差值是 7 - 1 = 6
可能的最小差值是 2

适合用滑动窗口的思想
*/

// 解题思路，先排序，后判断nums[i+k-1] 与 nums[i]的差值 与最终结果一直比较最小值
func minimumDifference(nums []int, k int) int {
	sort.Ints(nums)
	res := 100000 + 1
	for i := 0; i < len(nums); i++ {
		if i+k-1 >= len(nums) {
			break
		}
		if nums[i+k-1]-nums[i] < res {
			res = nums[i+k-1] - nums[i]
		}
	}
	return res
}
