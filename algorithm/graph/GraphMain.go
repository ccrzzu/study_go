package graph

/**
拓扑排序的原理：在一个有向图中，每次找到一个没有前驱节点的结点（也就是入度为 0 的结点），然后把它指向的结点的边都去掉，==重复这个过程（BFS）==，直到所有结点已被找到，或者没有符合条件的节点（如果图中有环存在）。

回顾一下图的三种表示方式：

1、边表示法（即题目中表示方法）；

2、邻接表法；

3、邻接矩阵表示法。

用邻接表存储图比较方便寻找入度为  的节点。



1、什么是AOV？
（在现代化管理中，人们常用有向图来描述和分析一项工程的计划和实施过程，一个工程常被分为多个小的子工程，
这些子工程被称为活动（Activity)，在有向图中若以顶点表示活动，有向边表示活动之间的先后关系，
这样的图简称为AOV（Activity On Vertex Network）网。）
还有AOE？
解决一个有依赖的工程是否能够完成。
拓扑排序和关键路径问题。
1）AOV（Activity On Vertex）网：与顶点相关。图中不允许有回路。
2）AOE（Activity On Edge）网：与边相关。整个任务是否能够完成取决于最长的关键路径。

2、
拓扑排序并非一种排序算法，它能得到一个 AOV 网络的拓扑序列，
用于判断有向图中是否有环，即可以判断一系列活动是否有循环依赖；
解决一个工程中的任务是否能够顺利完成，判断是否出现环。
（补充：还有一种判断图中是否有环的数据结构是“并查集”：https://zhuanlan.zhihu.com/p/93647900）。

3、
解题思路：
找无前驱的结点（即入度为 0 的结点），一个一个地删去（使用队列或者栈），
删的时候，把邻居结点的入度（即度 -1 ）。借助队列实现。

4、
解决问题：
“拓扑排序”用于对有先后顺序的任务的输出，如果先后顺序形成一个环，那么就表示这些任务头尾依赖，就永远不能完成。
因此“拓扑排序”还可以用于检测一个图中是否有环。
**/